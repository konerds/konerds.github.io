<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java 환경 소개 on Konerd Here!</title>
    <link>https://konerds.github.io/posts/summary/java/introduce/</link>
    <description>Recent content in Java 환경 소개 on Konerd Here!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>adr10won@gmail.com (konerds)</managingEditor>
    <webMaster>adr10won@gmail.com (konerds)</webMaster>
    <lastBuildDate>Sun, 03 Dec 2023 02:50:26 +0000</lastBuildDate>
    <atom:link href="https://konerds.github.io/posts/summary/java/introduce/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java에 대한 일부 비판에 대한 답변</title>
      <link>https://konerds.github.io/posts/summary/java/introduce/6/</link>
      <pubDate>Sun, 03 Dec 2023 02:50:26 +0000</pubDate><author>adr10won@gmail.com (konerds)</author>
      <guid>https://konerds.github.io/posts/summary/java/introduce/6/</guid>
      <description>Java 에 대한 일부 비판에 대한 답변 Java 는 대중의 주목을 받으며 오랜 역사를 거쳐 발전해오고 있으나, 그 과정에 있어서 상당한 비판 역시 받아왔습니다. 이 중 일부는 Java 의 첫 번째 버전 출시 때 진행된 다소 지나친 마케팅과 결합된 몇 가지 기술적인 단점이 그 원인으로 꼽힙니다.
지나치게 장황한 내용 Java 언어는 종종 지나치게 장황하다는 비판을 받아왔습니다.
Object o = new Object(); 위와 같은 간단한 객체 생성 및 참조 변수 할당 코드를 살펴봐도 좌변과 우변에 타입이 반복적으로 등장합니다.</description>
    </item>
    <item>
      <title>Java 와 다른 언어의 비교</title>
      <link>https://konerds.github.io/posts/summary/java/introduce/5/</link>
      <pubDate>Sun, 03 Dec 2023 02:50:15 +0000</pubDate><author>adr10won@gmail.com (konerds)</author>
      <guid>https://konerds.github.io/posts/summary/java/introduce/5/</guid>
      <description>Java 와 다른 언어의 비교 Java vs C Java 는 객체 지향적인 반면, C 는 절차 지향적입니다. Java 는 바이트 코드 파일로 이식이 가능한 반면, C 는 재컴파일이 필요합니다. Java 는 런타임 도중 바이트 코드를 변경하는 기능을 가지고 있습니다. Java 에는 포인터 및 포인터 산술이 존재하지 않습니다. Java 는 가비지 컬렉션을 통해 자동으로 메모리를 관리할 수 있습니다. Java 에는 구조체가 존재하지 않으며, 로우 레벨에서 메모리를 배치하는 기능이 없습니다. Java 에는 전처리기가 없습니다.</description>
    </item>
    <item>
      <title>Java 보안</title>
      <link>https://konerds.github.io/posts/summary/java/introduce/4/</link>
      <pubDate>Sun, 03 Dec 2023 02:49:51 +0000</pubDate><author>adr10won@gmail.com (konerds)</author>
      <guid>https://konerds.github.io/posts/summary/java/introduce/4/</guid>
      <description>Java 보안 Java 언어는 처음부터 보안을 염두에 두고 설계되었습니다. 이는 다른 많은 기존 시스템 및 플랫폼에 비해 큰 이점을 제공합니다.
Java 보안 아키텍처는 보안 전문가에 의해 설계되었으며, 플랫폼이 시작된 이래로 다른 많은 보안 전문가에 의해 연구되고 검증되었습니다.
Java 보안 아키텍처의 근본은 바이트 코드가 표현할 수 있는 내용에 강한 제약을 두는 것입니다. 예를 들어 Java 에서는 메모리를 직접 처리할 수 없으며, 이는 GC(Garbage Collector)를 통해 간접적으로 이루어집니다. 이는 C/C++ 등 하드웨어와 가깝게 설계된 기존 언어를 괴롭혔던 보안 문제이기도 합니다.</description>
    </item>
    <item>
      <title>Java 프로그램의 생명주기</title>
      <link>https://konerds.github.io/posts/summary/java/introduce/3/</link>
      <pubDate>Sun, 03 Dec 2023 02:43:30 +0000</pubDate><author>adr10won@gmail.com (konerds)</author>
      <guid>https://konerds.github.io/posts/summary/java/introduce/3/</guid>
      <description>Java 프로그램의 생명주기 Java 코드가 컴파일 및 실행되는 과정을 알아보겠습니다.
먼저 Java 소스 코드 .java 파일은 자바 컴파일러 javac 프로그램을 통해 Java 바이트 코드 .class 파일로 컴파일됩니다. .class 파일은 플랫폼이 처리할 기능의 가장 작은 단위이며, 실행 중인 프로그램에 새로운 코드를 추가하는 유일한 방법입니다. 새로운 클래스 파일은 JVM 클래스 로더를 통해 온보딩되며, 인터프리터와 JIT 컴파일러를 통해 최종적으로 기계가 이해할 수 있는 머신 코드로 변환됩니다.
자주 묻는 질문 바이트 코드란 무엇입니까? 개발자가 JVM 을 처음 접할 때 종종 &amp;ldquo;컴퓨터 안의 컴퓨터&amp;rdquo; 라고 생각합니다.</description>
    </item>
    <item>
      <title>Java, JVM 의 간략한 역사</title>
      <link>https://konerds.github.io/posts/summary/java/introduce/2/</link>
      <pubDate>Sun, 03 Dec 2023 02:43:20 +0000</pubDate><author>adr10won@gmail.com (konerds)</author>
      <guid>https://konerds.github.io/posts/summary/java/introduce/2/</guid>
      <description>Java, JVM 의 간략한 역사 Java 1.0 (1996) Java 의 최초 공개 버전으로, 8개의 패키지로 구성된 212개의 클래스만 포함
Java 1.1 (1997) Inner Class, Reflection API 도입 등
Java 1.2 (1998) Set, Map, List 등 Java Collection API 도입 등
새로운 기능으로 인해 Sun Microsystems 는 Java 2 플랫폼으로 상표명을 변경
(Java 2 플랫폼은 단순한 상표명일 뿐 실제 출시 버전 번호와는 다름)
Java 1.3 (2000) 주로 버그 수정, 안정성 및 성능 개선에 초점을 맞춘 업데이트</description>
    </item>
    <item>
      <title>JAVA 언어, JVM 및 생태계</title>
      <link>https://konerds.github.io/posts/summary/java/introduce/1/</link>
      <pubDate>Thu, 30 Nov 2023 17:01:50 +0900</pubDate><author>adr10won@gmail.com (konerds)</author>
      <guid>https://konerds.github.io/posts/summary/java/introduce/1/</guid>
      <description>Java 언어, JVM 및 생태계 1990년대 후반부터 등장한 Java 프로그래밍 환경은 크게 Java 언어와 이에 대한 런타임 환경을 제공하는 JVM(Java Virtual Machine) 으로 구성됩니다. Java가 처음 개발되었을 당시 이러한 분할된 구조의 환경은 신박하다는 평가를 받았으며, Java 가 등장하고 몇 년 후에 발표된 Microsoft 의 .NET 환경도 매우 유사한 플랫폼 아키텍처 접근 방식을 채택했습니다. Microsoft 의 .NET 플랫폼과 Java 의 중요한 차이점 중 하나는 Java 는 항상 여러 공급업체를 통해 비교적 개방적인 생태계로 발전되었다는 점입니다.</description>
    </item>
  </channel>
</rss>
